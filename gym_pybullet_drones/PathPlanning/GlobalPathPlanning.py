import numpy as np
import matplotlib.pyplot as plt
from gym_pybullet_drones.PathPlanning.AStar import AStar
from gym_pybullet_drones.PathPlanning.EasyAStar import EasyAStar
from gym_pybullet_drones.PathPlanning.Easy_RRT import RRT_star

# GlobalPathPlanning class for global path planning
class GlobalPathPlanning():
    ''' The class to make global path planning '''
    def __init__(self,method="AStar",start=[0,0,0.2],goal=[2,2,1],t=0.1,num_drones=1):
        
        '''
        Parameters:
        ----------------
        method: the method to make global path planning
        start: the start point of the drone
        goal: the goal point of the drone
        t: the time interval of the drone
        num_drones: the number of the drones
        '''

        self.method = method
        self.start = start
        self.goal = goal
        self.t = t
        self.num_drones = num_drones

    def Planner(self):
        '''
        Parameters:
        ----------------
        self: the class itself
        '''
        # init the global path generated by the global path planning
        global_path = []

        if self.method == "EasyAStar":
            # init the AStar class
            AStar_global = EasyAStar(self.start,self.goal,self.t,self.num_drones)
            # get the global path
            global_path = AStar_global.EasyAstar()
            # # check the path
            # AStar_global.checkPath(global_path)

        elif self.method == "AStar":
            # init the AStar class
            AStar_global = AStar(self.start,self.goal,self.t,self.num_drones)
            # get the global path
            global_path = AStar_global.Astar()
            # # check the path
            # AStar_global.checkPath(global_path)

        elif self.method == "RRT":
            # init the RRT class
            RRT_global = RRT_star(self.start,self.goal,self.t)
            # get the global path
            global_path = RRT_global.RRT_process()
            # separate the path into small paths
            long_path = []
            # get the long path by interpolation
            for i in range(len(global_path)-1):
                long_path.append(global_path[i, :])
                for j in range(9):
                    new_spot = global_path[i, :]+(global_path[i+1, :]-global_path[i, :])*(j+1)/10
                    long_path.append(new_spot)
            long_path.append(global_path[-1, :])
            long_path = np.array(long_path)
            global_path = long_path

        return global_path
    
